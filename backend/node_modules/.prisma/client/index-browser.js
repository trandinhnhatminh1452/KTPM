
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  resetToken: 'resetToken',
  resetTokenExpiry: 'resetTokenExpiry',
  avatarId: 'avatarId'
};

exports.Prisma.StaffProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fullName: 'fullName',
  phoneNumber: 'phoneNumber',
  position: 'position',
  identityCardNumber: 'identityCardNumber',
  gender: 'gender',
  birthDate: 'birthDate',
  address: 'address',
  managedBuildingId: 'managedBuildingId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  studentId: 'studentId',
  fullName: 'fullName',
  gender: 'gender',
  birthDate: 'birthDate',
  identityCardNumber: 'identityCardNumber',
  ethnicity: 'ethnicity',
  religion: 'religion',
  priorityObject: 'priorityObject',
  phoneNumber: 'phoneNumber',
  personalEmail: 'personalEmail',
  faculty: 'faculty',
  courseYear: 'courseYear',
  className: 'className',
  permanentProvince: 'permanentProvince',
  permanentDistrict: 'permanentDistrict',
  permanentAddress: 'permanentAddress',
  status: 'status',
  startDate: 'startDate',
  checkInDate: 'checkInDate',
  checkOutDate: 'checkOutDate',
  contractEndDate: 'contractEndDate',
  fatherName: 'fatherName',
  fatherDobYear: 'fatherDobYear',
  fatherPhone: 'fatherPhone',
  fatherAddress: 'fatherAddress',
  motherName: 'motherName',
  motherDobYear: 'motherDobYear',
  motherPhone: 'motherPhone',
  motherAddress: 'motherAddress',
  emergencyContactRelation: 'emergencyContactRelation',
  emergencyContactPhone: 'emergencyContactPhone',
  emergencyContactAddress: 'emergencyContactAddress',
  roomId: 'roomId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BuildingScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoomScalarFieldEnum = {
  id: 'id',
  buildingId: 'buildingId',
  number: 'number',
  type: 'type',
  capacity: 'capacity',
  actualOccupancy: 'actualOccupancy',
  floor: 'floor',
  status: 'status',
  description: 'description',
  roomFee: 'roomFee',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AmenityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  url: 'url',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoomAmenityScalarFieldEnum = {
  roomId: 'roomId',
  amenityId: 'amenityId',
  quantity: 'quantity',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeeRateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  feeType: 'feeType',
  vehicleType: 'vehicleType',
  unitPrice: 'unitPrice',
  unit: 'unit',
  effectiveFrom: 'effectiveFrom',
  effectiveTo: 'effectiveTo',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  studentProfileId: 'studentProfileId',
  roomId: 'roomId',
  billingMonth: 'billingMonth',
  billingYear: 'billingYear',
  issueDate: 'issueDate',
  dueDate: 'dueDate',
  paymentDeadline: 'paymentDeadline',
  totalAmount: 'totalAmount',
  paidAmount: 'paidAmount',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  type: 'type',
  description: 'description',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  studentProfileId: 'studentProfileId',
  amount: 'amount',
  paymentDate: 'paymentDate',
  paymentMethod: 'paymentMethod',
  transactionCode: 'transactionCode',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UtilityMeterReadingScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  type: 'type',
  readingDate: 'readingDate',
  indexValue: 'indexValue',
  billingMonth: 'billingMonth',
  billingYear: 'billingYear',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MaintenanceScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  reportedById: 'reportedById',
  issue: 'issue',
  reportDate: 'reportDate',
  status: 'status',
  assignedToId: 'assignedToId',
  completedDate: 'completedDate',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoomTransferScalarFieldEnum = {
  id: 'id',
  studentProfileId: 'studentProfileId',
  fromRoomId: 'fromRoomId',
  toRoomId: 'toRoomId',
  transferDate: 'transferDate',
  reason: 'reason',
  adminNotes: 'adminNotes',
  approvedById: 'approvedById',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VehicleRegistrationScalarFieldEnum = {
  id: 'id',
  studentProfileId: 'studentProfileId',
  vehicleType: 'vehicleType',
  licensePlate: 'licensePlate',
  brand: 'brand',
  model: 'model',
  color: 'color',
  parkingCardNo: 'parkingCardNo',
  isActive: 'isActive',
  startDate: 'startDate',
  endDate: 'endDate',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MediaScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  path: 'path',
  mimeType: 'mimeType',
  size: 'size',
  mediaType: 'mediaType',
  uploadedAt: 'uploadedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LoginLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  timestamp: 'timestamp',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  status: 'status',
  location: 'location'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  STUDENT: 'STUDENT',
  STAFF: 'STAFF',
  ADMIN: 'ADMIN'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

exports.StudentStatus = exports.$Enums.StudentStatus = {
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  RENTING: 'RENTING',
  EVICTED: 'EVICTED',
  CHECKED_OUT: 'CHECKED_OUT'
};

exports.RoomType = exports.$Enums.RoomType = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  MANAGEMENT: 'MANAGEMENT'
};

exports.RoomStatus = exports.$Enums.RoomStatus = {
  AVAILABLE: 'AVAILABLE',
  FULL: 'FULL',
  UNDER_MAINTENANCE: 'UNDER_MAINTENANCE'
};

exports.FeeType = exports.$Enums.FeeType = {
  ROOM_FEE: 'ROOM_FEE',
  ELECTRICITY: 'ELECTRICITY',
  WATER: 'WATER',
  PARKING: 'PARKING',
  OTHER_FEE: 'OTHER_FEE'
};

exports.VehicleType = exports.$Enums.VehicleType = {
  BICYCLE: 'BICYCLE',
  MOTORBIKE: 'MOTORBIKE',
  ELECTRIC_BICYCLE: 'ELECTRIC_BICYCLE',
  CAR: 'CAR',
  OTHER: 'OTHER'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  UNPAID: 'UNPAID',
  PAID: 'PAID',
  PARTIALLY_PAID: 'PARTIALLY_PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  ROOM_FEE: 'ROOM_FEE',
  ELECTRICITY: 'ELECTRICITY',
  WATER: 'WATER',
  PARKING: 'PARKING',
  OTHER_FEE: 'OTHER_FEE'
};

exports.UtilityType = exports.$Enums.UtilityType = {
  ELECTRICITY: 'ELECTRICITY',
  WATER: 'WATER'
};

exports.MaintenanceStatus = exports.$Enums.MaintenanceStatus = {
  PENDING: 'PENDING',
  ASSIGNED: 'ASSIGNED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.TransferStatus = exports.$Enums.TransferStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED'
};

exports.MediaType = exports.$Enums.MediaType = {
  USER_AVATAR: 'USER_AVATAR',
  ROOM_IMAGE: 'ROOM_IMAGE',
  BUILDING_IMAGE: 'BUILDING_IMAGE',
  VEHICLE_IMAGE: 'VEHICLE_IMAGE',
  MAINTENANCE_IMAGE: 'MAINTENANCE_IMAGE',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  User: 'User',
  StaffProfile: 'StaffProfile',
  StudentProfile: 'StudentProfile',
  Building: 'Building',
  Room: 'Room',
  Amenity: 'Amenity',
  RoomAmenity: 'RoomAmenity',
  FeeRate: 'FeeRate',
  Invoice: 'Invoice',
  InvoiceItem: 'InvoiceItem',
  Payment: 'Payment',
  UtilityMeterReading: 'UtilityMeterReading',
  Maintenance: 'Maintenance',
  RoomTransfer: 'RoomTransfer',
  VehicleRegistration: 'VehicleRegistration',
  Media: 'Media',
  LoginLog: 'LoginLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
